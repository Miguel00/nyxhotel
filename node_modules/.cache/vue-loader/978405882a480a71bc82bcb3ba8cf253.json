{"remainingRequest":"/Applications/MAMP/htdocs/nyxhotels-restaurant-reservation/node_modules/vue-loader-v16/dist/index.js??ref--0-1!/Applications/MAMP/htdocs/nyxhotels-restaurant-reservation/src/components/Home.vue?vue&type=style&index=0&id=8dc7cce2&scoped=true&lang=css","dependencies":[{"path":"/Applications/MAMP/htdocs/nyxhotels-restaurant-reservation/src/components/Home.vue","mtime":1660182910541},{"path":"/Applications/MAMP/htdocs/nyxhotels-restaurant-reservation/node_modules/css-loader/dist/cjs.js","mtime":1658464854504},{"path":"/Applications/MAMP/htdocs/nyxhotels-restaurant-reservation/node_modules/vue-loader-v16/dist/stylePostLoader.js","mtime":1658464856308},{"path":"/Applications/MAMP/htdocs/nyxhotels-restaurant-reservation/node_modules/postcss-loader/src/index.js","mtime":1658464855015},{"path":"/Applications/MAMP/htdocs/nyxhotels-restaurant-reservation/node_modules/cache-loader/dist/cjs.js","mtime":1658464853594},{"path":"/Applications/MAMP/htdocs/nyxhotels-restaurant-reservation/node_modules/vue-loader-v16/dist/index.js","mtime":1658464855530}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5lcnJvci1mZWVkYmFjayB7CiAgY29sb3I6IHJlZDsKfQo="},{"version":3,"sources":["/Applications/MAMP/htdocs/nyxhotels-restaurant-reservation/src/components/Home.vue"],"names":[],"mappings":";AAyVA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;EACd,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AACZ","file":"/Applications/MAMP/htdocs/nyxhotels-restaurant-reservation/src/components/Home.vue","sourceRoot":"","sourcesContent":["<template>\n  <div class=\"container\">\n    <div class=\"row\">\n      <div class=\"col-lg-12\">\n        <br><br><br>\n        <Form @submit=\"checkAvailability\" :validation-schema=\"schema\">\n          <div v-if=\"!successful\">\n            <div class=\"row justify-content-center\">\n              <div class=\"col-lg-4\">\n                <div class=\"form-group\">\n                  <label for=\"hotelReservationReference\"> #Bracelet or #Reservation</label>\n                  <Field name=\"hotelReservationReference\" type=\"text\" class=\"form-control\" />\n                  <ErrorMessage name=\"hotelReservationReference\" class=\"error-feedback\" />\n                  <sub style=\"color:red;\">{{verifyReservation}}</sub>\n                  <!-- <label for=\"email\">Email</label>\n                  <Field name=\"email\" type=\"email\" class=\"form-control\" />\n                  <ErrorMessage name=\"email\" class=\"error-feedback\" /> -->\n                </div>\n              </div>\n            </div>\n            <div>\n            </div>\n            <div class=\"row justify-content-center\">\n              <div class=\"col-lg-4\">\n                <div class=\"form-group\">\n                  <button class=\"btn btn-primary btn-block\" style=\"background-color:rgb(73,105,144);border-color:rgb(73,105,144);\"  :disabled=\"loading\">\n                    <span\n                      v-show=\"loading\"\n                      class=\"spinner-border spinner-border-sm\"\n                    ></span>\n                    Verify\n                  </button>\n                </div>\n              </div>\n            </div>          \n          </div>\n        </Form>\n        <Form @submit=\"sendReservation\" :validation-schema=\"schema\">\n          <div v-if=\"successful\">\n            <div class=\"form-group\">\n              <div class=\"container\">\n                <div class=\"row justify-content-center\">\n                  <div class=\"col-lg-4\">\n                    <div class=\"row\">\n                      <div class=\"col-lg-12\">\n                          <span style=\"text-align:left;\">Restaurant: </span>\n                            <br>\n                            <Field name=\"restaurantId\" as=\"select\" class=\"form-control\">\n                              <option value=\"\" disabled>Restaurant: </option>\n                              <option v-for=\"(option, index) in restaurants\" :key=\"index\"  :value=\"option.restaurant.id\" :disabled=\"!option.valid\">\n                                {{ option.restaurant.name }}\n                              </option>\n                            </Field>\n                            <ErrorMessage name=\"restaurantId\" class=\"error-feedback\" />\n                            <!-- <Field v-slot=\"{ value }\" name=\"drink\" as=\"select\" multiple>\n                              <option value=\"\" disabled>Select a drink</option>\n                              <option v-for=\"drink in drinks\" :key=\"drink\" :value=\"drink\" :selected=\"value && value.includes(drink)\">{{ drink }}</option>\n                            </Field> -->\n                      </div>\n                      <div class=\"col-lg-12 text-left\" style=\"margin-top:15px;\">\n                        <span>Date: </span>\n                          <!-- <label for=\"password\">Password</label> -->\n                          <!-- Fm:  -->\n                          <Field name=\"reservationDate\" type=\"date\" :min=\"minDate\" :max=\"maxDate\" class=\"form-control\" rules=\"between:1,10\" />\n                          <ErrorMessage name=\"reservationDate\" class=\"error-feedback\" />\n                      </div>\n                      <div class=\"col-lg-12 text-left\" style=\"margin-top:15px;\">\n                          <span>Hour: </span>\n                          <Field name=\"schedule\" as=\"select\" class=\"form-control\">\n                            <option value=\"\" disabled>Hour: </option>\n                            <option value=\"18:00\" >18:00</option>\n                            <option value=\"20:00\" >20:00</option>\n                            <option value=\"10:00\" >22:00</option>\n                          </Field>\n                          <ErrorMessage name=\"schedule\" class=\"error-feedback\" />\n                      </div>\n                      <div class=\"col-lg-12 text-left\" style=\"margin-top:15px;\">\n                        <span>People: </span>\n                        <Field name=\"people\" as=\"select\" class=\"form-control\">\n                          <option value=\"\" disabled>People: </option>\n                          <option v-for=\"(option, index) in people\" :key=\"index\"  :value=\"index+1\">\n                            {{ index + 1 }}\n                          </option>\n                        </Field>\n                        <ErrorMessage name=\"people\" class=\"error-feedback\" />\n                      </div>\n                      <div class=\"col-lg-12 text-left\" style=\"margin-top:15px;\">\n                        <label for=\"clientEmail\">Email: </label>\n                        <Field name=\"clientEmail\" type=\"email\" class=\"form-control\" />\n                        <ErrorMessage name=\"email\" class=\"error-feedback\" />\n                      </div>\n                      <div class=\"col-lg-12 text-left\" style=\"margin-top:15px;\">\n                        <span>Comments: </span>\n                          <!-- <textarea name=\"comments\" type=\"textarea\" class=\"form-control\" rows=\"4\" cols=\"50\" ></textarea> -->\n                          <Field name=\"clientNotes\" as=\"textarea\" class=\"form-control\" rows=\"4\" cols=\"50\" />\n                          <ErrorMessage name=\"clientNotes\" class=\"error-feedback\" />\n                          <sub style=\"color:#007bff;\">{{verifyReservationS}}</sub>\n                          <!-- <sub style=\"color:#28a745;\">{{verifyReservationSS}}</sub> -->\n                      </div>\n                    </div>\n                  </div>\n                </div>\n                <div class=\"row justify-content-center\">\n                  <div class=\"col-lg-3\">\n                    <div class=\"form-group\">\n                      <br>\n                      <button class=\"btn btn-primary btn-block\" style=\"background-color:rgb(73,105,144);border-color:rgb(73,105,144);\" :disabled=\"loading\">\n                        <span\n                          v-show=\"loading\"\n                          class=\"spinner-border spinner-border-sm\"\n                        ></span>\n                          Check Availability\n                      </button>\n                    </div>\n                  </div>\n                </div> \n              </div>\n            </div>\n          </div>\n        </Form>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport UserService from \"../services/user.service\";\nimport { Form, Field, ErrorMessage } from \"vee-validate\";\nimport * as yup from \"yup\";\n\nexport default {\n  name: \"Home\",\n  components: {\n    Form,\n    Field,\n    ErrorMessage,\n  },\n  data() {\n    const schema = yup.object().shape({\n      hotelReservationReference: yup\n        .string()\n        .required(\"#Bracelet or Reserve is necessary\")\n        .min(3, \"Must be at least 3 characters!\")\n        .max(20, \"Must be maximum 20 characters!\"),\n      restaurantId: yup\n        .string()\n        .required(\"#Restaurant is necessary\"),\n      reservationDate: yup\n        .string()\n        .required(\"#Date is necessary\"),\n      schedule: yup\n        .string()\n        .required(\"#Hour is necessary\"),\n      people: yup\n        .string()\n        .required(\"#People is necessary\"),\n      email: yup\n        .string()\n        .required(\"Email is required!\")\n        .email(\"Email is invalid!\"),\n      password: yup\n        .string()\n        .required(\"Password is required!\")\n        .min(6, \"Must be at least 6 characters!\")\n        .max(40, \"Must be maximum 40 characters!\"),\n    });\n    return {\n      content: \"\",\n      successful: false,\n      restaurants: [],\n      verifyReservation: \"\",\n      verifyReservationS: \"\",\n      verifyReservationSS: \"\",\n      people: 0,\n      minDate: \"\",\n      maxDate: \"\",\n      message: \"\",\n      schema,\n      loading: false,\n    };\n  },\n  mounted() {\n    UserService.getPublicContent().then(\n      (response) => {\n        this.content = response.data;\n      },\n      (error) => {\n        this.content =\n          (error.response &&\n            error.response.data &&\n            error.response.data.message) ||\n          error.message ||\n          error.toString();\n      }\n    );\n  },\n  methods: {\n    checkAvailability(user) {\n      this.loading = true\n      UserService.checkAvailability(user).then(\n        (response) => {\n          this.loading = false\n          const data = response.data\n          \n          \n          console.log(response)\n          if(data === null){\n            this.loading = false\n            this.verifyReservation = \"Id de reserva no encontrada\"\n          }\n          // const res = data.restaurants.filter(restaurant => restaurant.valid == true)\n          else if( data.restaurants.filter(restaurant => restaurant.valid == true) <= 0 ){\n            this.loading = false\n            this.verifyReservation = \"No cuenta con las noches minimas para reservar\"\n\n          }else{\n            // localStorage.setItem(\"hotelReservation\", data.hotelReservation.occupation);\n            localStorage.setItem(\"hotelReservationReference\", user.hotelReservationReference);\n            localStorage.setItem(\"clientFirstName\", data.client.name);\n            this.people = Number(data.hotelReservation.occupation)\n            this.restaurants = data.restaurants\n            this.successful = true\n\n            const today =  new Date()\n            this.minDate = today.getFullYear() + \"-\" + (today.getMonth() + 1).toString().padStart(2, \"0\") + \"-\" + today.getDate().toString().padStart(2, \"0\");\n            this.maxDate = today.getFullYear() + \"-\" + (today.getMonth() + 1).toString().padStart(2, \"0\") + \"-\" + (today.getDate()+1).toString().padStart(2, \"0\");\n            // console.log((today.getDate()+1).toString().padStart(2, \"0\"))\n          }\n          \n        },\n        (error) => {\n          console.log(error)\n        }\n      );\n      \n    },\n    sendReservation(reservation) {\n      this.loading = true\n      const today =  new Date()\n      const today2 = today.getFullYear() + \"-\" + (today.getMonth() + 1).toString().padStart(2, \"0\") + \"-\" + today.getDate().toString().padStart(2, \"0\");\n      \n      console.log(today2, reservation.reservationDate)\n      if(today2 == reservation.reservationDate){\n        \n        const hour = today.getHours()\n        if(hour < 14){\n          reservation.clientFirstName = localStorage.getItem(\"clientFirstName\");\n          reservation.hotelReservationReference = localStorage.getItem(\"hotelReservationReference\");\n          reservation.clientLastName = \".\"\n          reservation.status = \"active\"\n          reservation.restaurantId = Number(reservation.restaurantId)\n\n          UserService.verifyReservation(reservation).then(\n            (response) => {\n              console.log(response)\n              if(response.data.valid){\n                UserService.createReservation(reservation).then(\n                  (response) => {\n                    console.log(\"Jiji1: \", response)\n                    const {data} = response\n                    this.verifyReservationS = \"Reserva Creada\"\n                    this.loading = false\n                    console.log(data)\n                  },\n                  (error) => {\n                    console.log(\"Jiji2: \", error)\n                    this.verifyReservationS = \"Ya cuenta con una reserva para esa fecha\"\n                  }\n                );\n              }else if(response.data.validCode == 20){\n                    this.loading = false\n                    this.verifyReservationS = \"Numero maximo de reservas alcanzadas\"\n              }else if(response.data.validCode == 30){\n                    this.loading = false\n                    this.verifyReservationS = \"Restaurante sin disponibilidad\"\n              }\n              else if(response.data.validCode == 40){\n                    this.loading = false\n                    this.verifyReservationS = \"Ya cuenta con una reserva para esa fecha\"\n              }\n            },\n            (error) => {\n              console.log(error)\n              this.loading = false\n              this.verifyReservationS = \"Ya cuenta con una reserva para esa fecha\"\n            }\n          );\n        }else{\n          this.loading = false\n          this.verifyReservationS = \"Fuera de horario para reservar\"\n        }\n      }else{\n        console.log(reservation)\n        reservation.clientFirstName = localStorage.getItem(\"hotelReservation\");\n        reservation.clientFirstName = localStorage.getItem(\"clientFirstName\");\n        reservation.hotelReservationReference = localStorage.getItem(\"hotelReservationReference\");\n        reservation.clientLastName = \".\"\n        reservation.status = \"active\"\n        reservation.restaurantId = Number(reservation.restaurantId)\n        reservation.people = Number(reservation.people)\n        console.log(reservation)\n        UserService.verifyReservation(reservation).then(\n          (response) => {\n            console.log(response.data.valid)\n            if(response.data.valid){\n              reservation['resDate'] = reservation['reservationDate']\n              delete reservation['reservationDate'];\n              console.log(reservation)\n              UserService.createReservation(reservation).then(\n                (res) => {\n                  const {data} = res\n                  this.verifyReservationS = \"Reserva Creada\"\n                  this.loading = false\n                  console.log(data)\n                },\n                (err) => {\n                  console.log(err)\n                  this.verifyReservationS = \"Error\"\n                }\n              );\n            }else if(response.data.validCode == 20){\n                  this.loading = false\n                  this.verifyReservationS = \"Numero maximo de reservas alcanzadas\"\n            }else if(response.data.validCode == 30){\n                  this.loading = false\n                  this.verifyReservationS = \"Restaurante sin disponibilidad\"\n            }else if(response.data.validCode == 40){\n                    this.loading = false\n                    this.verifyReservationS = \"Ya cuenta con una reserva para esa fecha\"\n            }\n          },\n          (error) => {\n            console.log(error)\n            this.loading = false\n            this.verifyReservationS = \"Ya cuenta con una reserva para esa fecha3\"\n          }\n        );\n      }\n      // console.log(\"Aqui: \", new Date().getMonth())\n\n    },\n  }\n};\n</script>\n<style scoped>\n.error-feedback {\n  color: red;\n}\n</style>\n"]}]}